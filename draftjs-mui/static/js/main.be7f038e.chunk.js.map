{"version":3,"sources":["components/DraftjsMUI/StyleMap.tsx","util/ArrayUtil.tsx","components/DraftjsMUI/FormatMenu.tsx","components/DraftjsMUI/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","name","color","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","brown","grey","blueGrey","colorStyles","map","colorObj","colorTable","array","number","length","Math","ceil","Array","fill","undefined","_","i","slice","sliceByNumber","colorStyleMap","reduce","accum","fontSizes","label","size","fontSizeStyles","fontSizeObj","fontSizeStyleMap","fontSize","allStyleMap","FormatMenu","props","editorState","onClickInlineStyle","onChangeGroupStyle","useState","colorAnchorEl","setColorAnchorEl","fontSizeAnchorEl","setFontSizeAnchorEl","currentStyle","getCurrentInlineStyle","colorOpen","Boolean","fontSizeOpen","Box","sx","mx","mt","ToggleButtonGroup","aria-label","ToggleButton","value","selected","has","onMouseDown","e","Tooltip","title","event","preventDefault","currentTarget","Popover","open","anchorEl","onClose","anchorOrigin","vertical","horizontal","disableAutoFocus","disableEnforceFocus","Stack","spacing","p","colorRow","index","direction","cursor","stroke","theme","palette","action","strokeWidth","bgcolor","DraftjsMUI","onChange","editor","useRef","focusEditor","React","useCallback","current","focus","detailLength","getCurrentContent","getPlainText","Paper","variant","inlineStyle","RichUtils","toggleInlineStyle","toggledStyle","groupStyles","otherItems","filter","style","selection","getSelection","nextEditorState","isCollapsed","nextStyle","styles","remove","EditorState","setInlineStyleOverride","nextContentState","contentState","Modifier","removeInlineStyle","push","onClick","ref","customStyleMap","Typography","component","gutterBottom","align","App","createEmpty","setEditorState","CssBaseline","backgroundColor","Container","minHeight","IconButton","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be7f038e.chunk.js","sourcesContent":["import { amber, blue, blueGrey, brown, cyan, deepOrange, deepPurple, green,  grey, indigo, lightBlue, lightGreen, lime, orange, pink, purple, red, teal, yellow } from '@mui/material/colors'\r\nimport { sliceByNumber } from '../../util/ArrayUtil'\r\n\r\nexport const colors: {name: string, color: string}[] = [\r\n  {name: \"black\", color: \"black\"},\r\n  {name: \"red\", color: red[500]},\r\n  {name: \"pink\", color: pink[500]},\r\n  {name: \"purple\", color: purple[500]},\r\n  {name: \"deepPurple\", color: deepPurple[500]},\r\n  {name: \"indigo\", color: indigo[500]},\r\n  {name: \"blue\", color: blue[500]},\r\n  {name: \"lightBlue\", color: lightBlue[500]},\r\n  {name: \"cyan\", color: cyan[500]},\r\n  {name: \"teal\", color: teal[500]},\r\n  {name: \"green\", color: green[500]},\r\n  {name: \"lightGreen\", color: lightGreen[500]},\r\n  {name: \"lime\", color: lime[500]},\r\n  {name: \"yellow\", color: yellow[500]},\r\n  {name: \"amber\", color: amber[500]},\r\n  {name: \"orange\", color: orange[500]},\r\n  {name: \"deepOrange\", color: deepOrange[500]},\r\n  {name: \"brown\", color: brown[500]},\r\n  {name: \"grey\", color: grey[500]},\r\n  {name: \"blueGrey\", color: blueGrey[500]},\r\n]\r\n\r\nexport const colorStyles: string[] = colors.map(colorObj => colorObj.name)\r\n\r\nexport const colorTable = sliceByNumber(colors, 4)\r\n\r\nexport const colorStyleMap = colors.reduce((accum: {[ key: string ]: { color: string}}, colorObj) => {\r\n  accum[colorObj.name] = { color: colorObj.color }\r\n  return accum\r\n}, {})\r\n\r\nexport const fontSizes : {label: string, name:string, size: string}[] = [\r\n  {label: \"大1\", name: \"xxLarge\", size: \"xx-large\"},\r\n  {label: \"大2\", name: \"xLarge\", size: \"x-large\"},\r\n  {label: \"通常\", name: \"medium\", size: \"medium\"},\r\n]\r\n\r\nexport const fontSizeStyles: string[] = fontSizes.map(fontSizeObj => fontSizeObj.name)\r\n\r\nexport const fontSizeStyleMap = fontSizes.reduce((accum: {[ key: string ]: { fontSize: string}}, fontSizeObj) => {\r\n  accum[fontSizeObj.name] = { fontSize: fontSizeObj.size }\r\n  return accum\r\n}, {})\r\n\r\n\r\nexport const allStyleMap = {...colorStyleMap, ...fontSizeStyleMap}","export function sliceByNumber<T>(array: T[], number:number): T[][] {\r\n  const length = Math.ceil(array.length / number)\r\n  return new Array(length).fill(undefined).map((_, i) => \r\n    array.slice(i * number, (i + 1) * number)\r\n  )\r\n}","import React, { useState } from \"react\"\r\nimport { EditorState } from \"draft-js\"\r\nimport FormatBoldIcon from \"@mui/icons-material/FormatBold\"\r\nimport FormatItalicIcon from \"@mui/icons-material/FormatItalic\"\r\nimport FormatUnderlinedIcon from \"@mui/icons-material/FormatUnderlined\"\r\nimport FormatColorTextIcon from '@mui/icons-material/FormatColorText'\r\nimport FormatSizeIcon from \"@mui/icons-material/FormatSize\"\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\"\r\nimport Box from \"@mui/material/Box\"\r\nimport ToggleButton from \"@mui/material/ToggleButton\"\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\"\r\nimport Tooltip from \"@mui/material/Tooltip\"\r\nimport Popover from \"@mui/material/Popover\"\r\nimport Stack from \"@mui/material/Stack\"\r\nimport LensIcon from \"@mui/icons-material/Lens\"\r\n\r\nimport { colorStyles, colorTable, fontSizes, fontSizeStyles } from \"./StyleMap\"\r\n\r\ntype Props = {\r\n  editorState: EditorState;\r\n  onClickInlineStyle: (e: React.MouseEvent<HTMLSpanElement> | undefined, style: string) => void;\r\n  onChangeGroupStyle: (e: React.MouseEvent<HTMLSpanElement> | undefined, toggleStyle: string, groupStyles: string[]) => void;\r\n}\r\n\r\nconst FormatMenu = (props: Props) => {\r\n  const { editorState, onClickInlineStyle, onChangeGroupStyle } = props\r\n\r\n  const [colorAnchorEl, setColorAnchorEl] = useState<HTMLElement | null>(null)\r\n  const [fontSizeAnchorEl, setFontSizeAnchorEl] = useState<HTMLElement | null>(null)\r\n\r\n  const handleColorClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.preventDefault()\r\n    setColorAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleColorClose = () => {\r\n    setColorAnchorEl(null)\r\n  }\r\n\r\n  const handleClickColor = (event: React.MouseEvent<HTMLSpanElement>, color: string) => {\r\n    event.preventDefault()\r\n    setColorAnchorEl(null)\r\n    onChangeGroupStyle(event, color, colorStyles)\r\n  }\r\n\r\n\r\n  const handleFontSizeClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.preventDefault()\r\n    setFontSizeAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleFontSizeClose = () => {\r\n    setFontSizeAnchorEl(null)\r\n  }\r\n\r\n  const handleClickFontSize = (event: React.MouseEvent<HTMLSpanElement>, fontSize: string) => {\r\n    event.preventDefault()\r\n    setFontSizeAnchorEl(null)\r\n    onChangeGroupStyle(event, fontSize, fontSizeStyles)\r\n  }\r\n\r\n  const currentStyle = editorState.getCurrentInlineStyle()\r\n  const colorOpen = Boolean(colorAnchorEl)\r\n  const fontSizeOpen = Boolean(fontSizeAnchorEl)\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        mx: 1,\r\n        mt: 1,\r\n      }}\r\n    >\r\n      <ToggleButtonGroup\r\n        aria-label=\"text formatting\"\r\n      >\r\n        <ToggleButton\r\n          value=\"bold\"\r\n          selected={currentStyle.has(\"BOLD\")}\r\n          aria-label=\"bold\"\r\n          onMouseDown={(e: React.MouseEvent<HTMLSpanElement> | undefined) => onClickInlineStyle(e, \"BOLD\")}\r\n        >\r\n          <Tooltip title=\"太字\">\r\n            <FormatBoldIcon />\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          value=\"italic\"\r\n          selected={currentStyle.has(\"ITALIC\")}\r\n          aria-label=\"italic\"\r\n          onMouseDown={(e: React.MouseEvent<HTMLSpanElement> | undefined) => onClickInlineStyle(e, \"ITALIC\")}\r\n        >\r\n          <Tooltip title=\"斜体\">\r\n            <FormatItalicIcon />\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          selected={currentStyle.has(\"UNDERLINE\")}\r\n          value=\"underlined\"\r\n          aria-label=\"underlined\"\r\n          onMouseDown={(e: React.MouseEvent<HTMLSpanElement> | undefined) => onClickInlineStyle(e, \"UNDERLINE\")}\r\n        >\r\n          <Tooltip title=\"下線\">\r\n            <FormatUnderlinedIcon />\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          value=\"color\"\r\n          aria-label=\"color\"\r\n          onMouseDown={handleColorClick}\r\n        >\r\n          <Tooltip title=\"色\">\r\n            <FormatColorTextIcon />\r\n          </Tooltip>\r\n          <ArrowDropDownIcon />\r\n        </ToggleButton>\r\n        <ToggleButton\r\n          value=\"fontSize\"\r\n          aria-label=\"font-size\"\r\n          onMouseDown={handleFontSizeClick}\r\n        >\r\n          <Tooltip title=\"文字サイズ\">\r\n            <FormatSizeIcon />\r\n          </Tooltip>\r\n          <ArrowDropDownIcon />\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n      <Popover\r\n        open={colorOpen}\r\n        anchorEl={colorAnchorEl}\r\n        onClose={handleColorClose}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n        disableAutoFocus={true}\r\n        disableEnforceFocus={true}\r\n      >\r\n        <Stack spacing={1} sx={{ p: 2 }}>\r\n          {colorTable.map((colorRow, index) => (\r\n            <Stack\r\n              key={index}\r\n              direction=\"row\"\r\n              spacing={1}\r\n            >\r\n              {colorRow.map(colorObj => (\r\n                <Box\r\n                  key={colorObj.name}\r\n                  onMouseDown={(e) => handleClickColor(e, colorObj.name)}\r\n                  sx={{\r\n                    color: colorObj.color, cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  <LensIcon sx={{\r\n                    stroke: currentStyle.has(colorObj.name) ?\r\n                      (theme) => theme.palette.action.selected : \"white\",\r\n                    strokeWidth: 4\r\n                  }} />\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          ))}\r\n        </Stack>\r\n      </Popover>\r\n      <Popover\r\n        anchorEl={fontSizeAnchorEl}\r\n        open={fontSizeOpen}\r\n        onClose={handleFontSizeClose}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n        disableAutoFocus={true}\r\n        disableEnforceFocus={true}\r\n      >\r\n        <Stack spacing={1}>\r\n          {\r\n            fontSizes.map(fontSizeObj => (\r\n              <Box\r\n                key={fontSizeObj.name}\r\n                onMouseDown={(e) => handleClickFontSize(e, fontSizeObj.name)}\r\n                sx={{\r\n                  bgcolor: currentStyle.has(fontSizeObj.name) ? \"action.selected\" : \"backgrond.paper\",\r\n                  fontSize: fontSizeObj.size,\r\n                  cursor: \"pointer\"\r\n                }}\r\n              >\r\n                {fontSizeObj.label}\r\n              </Box>\r\n            ))\r\n          }\r\n        </Stack>\r\n      </Popover>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default FormatMenu\r\n","import React, { useRef } from \"react\"\r\nimport { Editor, EditorState, Modifier, RichUtils } from \"draft-js\"\r\nimport Box from \"@mui/material/Box\"\r\nimport Paper from \"@mui/material/Paper\"\r\nimport Typography from \"@mui/material/Typography\"\r\n\r\nimport FormatMenu from \"./FormatMenu\"\r\nimport { allStyleMap } from \"./StyleMap\"\r\n\r\nimport \"draft-js/dist/Draft.css\"\r\n\r\ntype Props = {\r\n  editorState: EditorState;\r\n  onChange: React.Dispatch<React.SetStateAction<EditorState>>;\r\n}\r\n\r\nconst DraftjsMUI = (props: Props) => {\r\n  const { editorState, onChange } = props\r\n\r\n  const editor = useRef<Editor>(null);\r\n\r\n  const focusEditor = React.useCallback(() => {\r\n    if (editor.current) {\r\n      editor.current.focus();\r\n    }\r\n  }, [editor]);\r\n\r\n  const handleClickInlineStyle = (e: React.MouseEvent<HTMLSpanElement> | undefined, inlineStyle: string) => {\r\n    if (e) {\r\n      e.preventDefault()\r\n    }\r\n    onChange(\r\n      RichUtils.toggleInlineStyle(editorState, inlineStyle)\r\n    )\r\n  }\r\n\r\n  const toggleGroupItem = (e: React.MouseEvent<HTMLSpanElement> | undefined, toggledStyle: string, groupStyles: string[]) => {\r\n    if (e) {\r\n      e.preventDefault()\r\n    }\r\n\r\n    const otherItems = groupStyles.filter(style => style !== toggledStyle)\r\n\r\n    const selection = editorState.getSelection()\r\n\r\n    // toggle selected item\r\n    let nextEditorState = RichUtils.toggleInlineStyle(editorState, toggledStyle)\r\n\r\n    if (selection.isCollapsed()) {\r\n      // remove other items style\r\n      const nextStyle = otherItems.reduce((styles, style) =>\r\n        styles.has(style) ? styles.remove(style) : styles\r\n        , nextEditorState.getCurrentInlineStyle())\r\n\r\n      onChange(EditorState.setInlineStyleOverride(\r\n        nextEditorState, nextStyle\r\n      ))\r\n\r\n      return\r\n    }\r\n\r\n    // if selection is there\r\n\r\n    // Let's just allow one color/fontSize at a time. Turn off other active colors/fontSize.\r\n    const nextContentState = otherItems\r\n      .reduce((contentState, name) => {\r\n        return Modifier.removeInlineStyle(contentState, selection, name)\r\n      }, nextEditorState.getCurrentContent())\r\n\r\n    onChange(EditorState.push(\r\n      nextEditorState,\r\n      nextContentState,\r\n      \"change-inline-style\"\r\n    ))\r\n  }\r\n\r\n  const detailLength = editorState.getCurrentContent().getPlainText('').length\r\n\r\n  return (\r\n    <>\r\n      <Paper variant=\"outlined\">\r\n        <FormatMenu editorState={editorState} onClickInlineStyle={handleClickInlineStyle} onChangeGroupStyle={toggleGroupItem} />\r\n        <Box onClick={focusEditor} sx={{ p: 2 }}>\r\n          <Editor\r\n            editorState={editorState}\r\n            onChange={onChange}\r\n            ref={editor}\r\n            customStyleMap={allStyleMap} />\r\n        </Box>\r\n      </Paper>\r\n      <Typography variant=\"caption\" component=\"div\" gutterBottom align=\"right\">\r\n        {detailLength}文字\r\n      </Typography>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DraftjsMUI","import React, { useState } from \"react\"\nimport {EditorState} from \"draft-js\"\nimport Box from '@mui/material/Box'\nimport CssBaseline from \"@mui/material/CssBaseline\"\nimport Container from \"@mui/material/Container\"\nimport IconButton from \"@mui/material/IconButton\"\nimport Link from \"@mui/material/Link\"\nimport Paper from \"@mui/material/Paper\"\nimport Tooltip from \"@mui/material/Tooltip\"\nimport Typography from \"@mui/material/Typography\"\nimport { blue, grey } from \"@mui/material/colors\"\nimport GitHubIcon from \"@mui/icons-material/GitHub\"\n\nimport DraftjsMUI from \"./components/DraftjsMUI\"\n\nfunction App() {\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty(),\n  )\n\n  return (\n    <Box>\n      <CssBaseline />\n      <Box sx={{backgroundColor:blue[50]}}>\n        <Container sx={{p:2, minHeight: 400}}>\n          <Paper sx={{p:2}}>\n            <Typography variant=\"h4\" gutterBottom component=\"div\">\n              Draft.js with MUI\n            </Typography>\n            <DraftjsMUI editorState={editorState} onChange={setEditorState} />\n          </Paper>\n        </Container>\n      </Box>\n      <Box sx={{backgroundColor:grey[600], color: \"white\"}}>\n        <Container sx={{p:2}}>\n          <Tooltip title=\"GitHub\">\n            <IconButton component={Link} href=\"https://github.com/yucatio/draftjs-mui\">\n              <GitHubIcon fontSize=\"large\" sx={{color: \"white\"}} />\n            </IconButton>\n          </Tooltip>\n        </Container>\n      </Box>\n    </Box>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}