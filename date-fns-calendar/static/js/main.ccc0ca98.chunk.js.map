{"version":3,"sources":["components/calendar/CalendarCell.js","components/calendar/index.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","calendarCell","color","wday","isTargetMonth","red","blue","palette","text","primary","secondary","backgroundColor","isToday","pink","CalendarCell","props","children","other","classes","TableCell","className","yearmonth","margin","spacing","tableHead","contrastText","light","getCalendarArray","date","eachWeekOfInterval","start","startOfMonth","end","endOfMonth","map","sunday","eachDayOfInterval","endOfWeek","Calendar","useState","Date","targetDate","setTargetDate","calendar","today","Fragment","Grid","container","justify","item","Button","variant","onClick","subMonths","addMonths","Typography","align","format","Table","TableHead","TableRow","head","TableBody","weekRow","rowNum","key","getDay","isSameMonth","isSameDay","getDate","Footer","Box","display","justifyContent","mx","IconButton","aria-label","href","Tooltip","title","paper","padding","App","CssBaseline","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccc0ca98.chunk.js","sourcesContent":["import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport TableCell from '@material-ui/core/TableCell'\nimport blue from '@material-ui/core/colors/blue'\nimport pink from '@material-ui/core/colors/pink'\nimport red from '@material-ui/core/colors/red'\n\nconst useStyles = makeStyles(theme => ({\n  calendarCell: {\n    color: ({wday, isTargetMonth}) => {\n      if(isTargetMonth) {\n        switch(wday) {\n          case 0: // Sunday\n            return red[500]\n          case 6: // Saturday\n            return blue[500]\n          default:\n            return theme.palette.text.primary\n        }\n      } else {\n        // previous or next month\n        switch(wday) {\n            case 0: // Sunday\n            return red[200]\n          case 6: // Saturday\n            return blue[200]\n          default:\n            return theme.palette.text.secondary\n        }\n      }\n    },\n    backgroundColor: ({isToday}) =>\n      isToday ? pink[50] : \"transparent\"\n  },\n}))\n\n\nfunction CalendarCell(props) {\n  const {wday, isTargetMonth, isToday, children, ...other} = props\n  const classes = useStyles(props)\n  return (<TableCell className={classes.calendarCell} {...other}>{children}</TableCell>)\n}\n\nexport default CalendarCell\n","import React, { useState }  from 'react'\n\nimport CalendarCell from './CalendarCell'\n\nimport format from 'date-fns/format'\nimport getDate from 'date-fns/getDate'\nimport getDay from 'date-fns/getDay'\nimport isSameDay from 'date-fns/isSameDay'\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval'\nimport endOfWeek from 'date-fns/endOfWeek'\nimport eachWeekOfInterval from 'date-fns/eachWeekOfInterval'\nimport addMonths from 'date-fns/addMonths'\nimport subMonths from 'date-fns/subMonths'\nimport startOfMonth from 'date-fns/startOfMonth'\nimport endOfMonth from 'date-fns/endOfMonth'\nimport isSameMonth from 'date-fns/isSameMonth'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles(theme => ({\n  yearmonth: {\n    margin: theme.spacing(2, 0, 1, 0),\n  },\n  tableHead: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.light,\n  },\n}))\n\nconst getCalendarArray = date => {\n  const sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  })\n  return sundays.map(sunday =>\n    eachDayOfInterval({start: sunday, end: endOfWeek(sunday)})\n  )\n}\n\nfunction Calendar(props) {\n  const [targetDate, setTargetDate] = useState(new Date())\n  const classes = useStyles()\n  const calendar = getCalendarArray(targetDate)\n  const today = new Date()\n\n  return (\n    <React.Fragment>\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          <Button variant=\"outlined\" onClick={() => setTargetDate(subMonths(targetDate, 1))}>前の月</Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"outlined\" onClick={() => setTargetDate(new Date())}>今月</Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"outlined\" onClick={() => setTargetDate(addMonths(targetDate, 1))}>次の月</Button>\n        </Grid>\n      </Grid>\n      <Typography variant=\"h4\" align=\"center\" className={classes.yearmonth}>{format(targetDate, 'y年M月')}</Typography>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>日</TableCell>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>月</TableCell>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>火</TableCell>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>水</TableCell>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>木</TableCell>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>金</TableCell>\n            <TableCell align=\"center\" classes={{head: classes.tableHead, }}>土</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {calendar.map((weekRow, rowNum) => (\n            <TableRow key={rowNum}>\n              {weekRow.map(date => (\n                <CalendarCell key={getDay(date)} wday={getDay(date)} isTargetMonth={isSameMonth(date, targetDate)} isToday={isSameDay(date, today)} align=\"center\">\n                  {getDate(date)}\n                </CalendarCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  )\n}\n\nexport default Calendar\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport DescriptionIcon from '@material-ui/icons/Description'\nimport GitHubIcon from '@material-ui/icons/GitHub'\n\nfunction Footer(props) {\n  return (\n    <Box display=\"flex\" justifyContent=\"flex-end\" mx={10}>\n      <Box>\n        <IconButton aria-label=\"blog\" href=\"http://yucatio.hatenablog.com/entry/2019/12/23/172547\">\n          <Tooltip title=\"blog\">\n            <DescriptionIcon />\n            </Tooltip>\n        </IconButton>\n      </Box>\n      <Box>\n        <IconButton aria-label=\"GitHub\" href=\"https://github.com/yucatio/date-fns-calendar\">\n          <Tooltip title=\"GitHub\">\n            <GitHubIcon />\n          </Tooltip>\n        </IconButton>\n      </Box>\n    </Box>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Paper from '@material-ui/core/Paper'\n\nimport Calendar from './calendar/'\nimport Footer from './Footer'\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    margin: theme.spacing(5, 10, 1, 10),\n    padding: theme.spacing(5, 5),\n  },\n}))\n\nfunction App() {\n  const classes = useStyles()\n\n  return (\n    <div>\n      <CssBaseline />\n      <Paper className={classes.paper}>\n        <Calendar />\n      </Paper>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}